<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mcmp.azure.vm.rightsizer.mapper.VmCostAnalysisMapper">

    <!-- ResultMap 정의 -->
    <resultMap id="vmMonthlyAvgCostResultMap" type="com.mcmp.azure.vm.rightsizer.dto.VmMonthlyAvgCostDto">
        <result property="subscriptionId" column="subscription_id"/>
        <result property="vmId" column="vm_id"/>
        <result property="avgCost" column="avg_cost"/>
        <result property="dayCount" column="day_count"/>
        <result property="latestCost" column="latest_cost"/>
        <result property="totalCost" column="total_cost"/>
        <result property="fromDate" column="from_date"/>
        <result property="toDate" column="to_date"/>
        <result property="dataRange" column="data_range"/>
    </resultMap>

    <!-- 특정 VM의 월별 평균 비용 조회 -->
    <select id="selectMonthlyAvgCostByVmId" resultMap="vmMonthlyAvgCostResultMap">
        SELECT base.subscription_id,
               base.vm_id,
               base.avg_cost,
               base.day_count,
               COALESCE(latest.latest_cost, 0) as latest_cost,
               base.total_cost,
               base.from_date,
               base.to_date,
               base.data_range
        FROM (SELECT subscription_id,
                     vm_id,
                     AVG(pre_tax_cost)                                                                as avg_cost,
                     COUNT(*)                                                                         as day_count,
                     SUM(pre_tax_cost)                                                                as total_cost,
                     MIN(usage_date)                                                                  as from_date,
                     MAX(usage_date)                                                                  as to_date,
                     IF(MIN(usage_date) <![CDATA[ < ]]> DATE_FORMAT(CURDATE(), '%Y%m01'), 'LAST_MONTH', 'ALL_DATA') as data_range
              FROM azure_cost_vm_daily
              WHERE vm_id = #{vmId}
                AND (
                  -- 지난달 데이터가 있으면 지난달만
                  (usage_date >= DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y%m01')
                      AND usage_date <![CDATA[ < ]]> DATE_FORMAT(CURDATE(), '%Y%m01')
                      AND vm_id IN (SELECT DISTINCT vm_id
                                    FROM azure_cost_vm_daily
                                    WHERE vm_id = #{vmId}
                                      AND usage_date >= DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y%m01')
                                      AND usage_date <![CDATA[ < ]]> DATE_FORMAT(CURDATE(), '%Y%m01')))
                      -- 지난달 데이터가 없으면 전체
                      OR vm_id NOT IN (SELECT DISTINCT vm_id
                                       FROM azure_cost_vm_daily
                                       WHERE vm_id = #{vmId}
                                         AND usage_date >= DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y%m01')
                                         AND usage_date <![CDATA[ < ]]> DATE_FORMAT(CURDATE(), '%Y%m01'))
                  )
              GROUP BY subscription_id, vm_id) base
                 LEFT JOIN (SELECT vm_id,
                                   usage_date,
                                   SUM(pre_tax_cost) as latest_cost
                            FROM azure_cost_vm_daily
                            WHERE vm_id = #{vmId}
                            GROUP BY vm_id, usage_date) latest
                           ON base.vm_id = latest.vm_id AND base.to_date = latest.usage_date
    </select>

    <!-- 전체 VM의 월별 평균 비용 조회 -->
    <select id="selectMonthlyAvgCostAllVm" resultMap="vmMonthlyAvgCostResultMap">
        SELECT base.subscription_id,
               base.vm_id,
               base.avg_cost,
               base.day_count,
               COALESCE(latest.latest_cost, 0) as latest_cost,
               base.total_cost,
               base.from_date,
               base.to_date,
               base.data_range
        FROM (SELECT subscription_id,
                     vm_id,
                     AVG(pre_tax_cost)                                                                as avg_cost,
                     COUNT(*)                                                                         as day_count,
                     SUM(pre_tax_cost)                                                                as total_cost,
                     MIN(usage_date)                                                                  as from_date,
                     MAX(usage_date)                                                                  as to_date,
                     IF(MIN(usage_date) <![CDATA[ < ]]> DATE_FORMAT(CURDATE(), '%Y%m01'), 'LAST_MONTH', 'ALL_DATA') as data_range
              FROM azure_cost_vm_daily
              WHERE (
                        -- 지난달 데이터가 있으면 지난달만
                        (usage_date >= DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y%m01')
                            AND usage_date <![CDATA[ < ]]> DATE_FORMAT(CURDATE(), '%Y%m01')
                            AND vm_id IN (SELECT DISTINCT vm_id
                                          FROM azure_cost_vm_daily
                                          WHERE
                                              usage_date >= DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y%m01')
                                            AND usage_date <![CDATA[ < ]]> DATE_FORMAT(CURDATE(), '%Y%m01')))
                            -- 지난달 데이터가 없으면 전체
                            OR vm_id NOT IN (SELECT DISTINCT vm_id
                                             FROM azure_cost_vm_daily
                                             WHERE usage_date >=
                                                   DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y%m01')
                                               AND usage_date <![CDATA[ < ]]> DATE_FORMAT(CURDATE(), '%Y%m01'))
                        )
              GROUP BY subscription_id, vm_id) base
                 LEFT JOIN (SELECT vm_id,
                                   usage_date,
                                   SUM(pre_tax_cost) as latest_cost
                            FROM azure_cost_vm_daily
                            GROUP BY vm_id, usage_date) latest
                           ON base.vm_id = latest.vm_id AND base.to_date = latest.usage_date
    </select>

</mapper>